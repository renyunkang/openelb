/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.mizarcore.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/mizarcore/v1alpha1";

message Addons {
  // InitializeWorkloadCluster descibes which plugin to establish a WorkloadCluster and configuration of the cluster
  // MizarGalaxy provides a default plugin, cluster-api-quick-start, to establish a WorkloadCluster.
  // +optional
  optional InitializeWorkloadCluster initializeWorkloadCluster = 1;

  // PreRegisterWorkloadCluster describes the process before register WorkloadCluster to MizarGalax.
  // More specificly, it describes the configuration of kubelet-for-cluster deployed in the specific WorkloadCluster.
  // +optional
  optional PreRegisterWorkloadCluster preRegisterWorkloadCluster = 2;
}

// Addresses shows workload cluster apiserver addresses.
message Address {
  // AddressIP represents IP of the address
  // +required
  optional string address = 1;

  // Type represents the type of Address.
  // +required
  optional string type = 2;
}

message Auth {
  // Type defines type of authentication, "KubeConig" or "Token"
  // +required
  optional string type = 1;

  // Kubeconfig represents the path of kubernetes configuration
  // +optional
  optional string kubeconfig = 2;

  // Token represents the token to access WorkloadCluster
  // +optional
  optional string token = 3;
}

// Cluster is the Schema for the clusters API.
message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterSpec spec = 2;

  optional ClusterStatus status = 3;
}

message ClusterCondition {
  // Type of cluster condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time we got an update on a given condition.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastHeartbeatTime = 3;

  // Last time the condition transit from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

// ClusterDaemonEndpoints lists ports opened by daemons running on the Node.
message ClusterDaemonEndpoints {
  // Endpoint on which KubeletForCluster is listening.
  // +optional
  optional DaemonEndpoint kubeletForClusterEndpoint = 1;

  // Endpoint on which KubeApiServer is listening in planet cluster
  // +optional
  optional DaemonEndpoint apiServerEndpoint = 2;
}

// ClusterList contains a list of Cluster.
message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// ClusterProxyOptions is the query options to a Node's proxy call
message ClusterProxyOptions {
  // Path is the URL path to use for the current proxy request
  optional string path = 1;
}

// ClusterSecretRef contains information about a credential for accessing planet cluster
message ClusterSecretRef {
  // Name of secret
  // +optional
  optional string name = 1;

  // Namespace of secret
  // +optional
  optional string namespace = 2;
}

// Cluster is the Schema for the clusters API.
message ClusterSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated string clusters = 2;
}

// ClusterList contains a list of Cluster.
message ClusterSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ClusterSet items = 2;
}

// ClusterSpec defines the desired state of Cluster.
message ClusterSpec {
  repeated k8s.io.api.core.v1.Taint taints = 2;

  // Addons describe the configuration of Cluster will be controlled by MizarGalaxy.
  optional Addons addons = 1;
}

// ClusterStatus defines the observed state of Cluster
message ClusterStatus {
  // Configuration describes the configuration of kubelet-for-cluster
  // +optional
  optional KubeletForClusterConfiguration configuration = 1;

  // Addresses shows workload cluster apiserver addresses
  // +optional
  repeated Address addresses = 2;

  // Phase represents the status of the WorkCluster.
  // +optional
  optional string phase = 3;

  // Allocatable represents the resources of a cluster that are available for scheduling.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable = 4;

  // Usage represents the resources of a cluster that has already used.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> usage = 5;

  // Nodes describes remained resource of top N nodes based on remaining resources
  // +optional
  repeated NodeLeftResource nodes = 6;

  // PlanetClusterAllocatable represents the resources of a cluster that are available for scheduling.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> planetClusterAllocatable = 7;

  // PlanetClusterUsage represents the resources of a cluster that has already used.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> planetClusterUsage = 8;

  // PlanetClusterNodes describes remained resource of top N nodes based on remaining resources
  // +optional
  repeated NodeLeftResource planetClusterNodes = 9;

  // Namespaces describes resource occupation of a federal namespace in the WorkloadCluster.
  // +optional
  repeated NamespaceUsage namespaces = 10;

  // Conditions is an array of current cluster conditions.
  // +optional
  repeated ClusterCondition conditions = 11;

  // ClusterInfo describes the specific information of WorkloadCluster
  // +optional
  optional Info clusterInfo = 12;

  // Endpoints of daemons running on the Cluster.
  // +optional
  optional ClusterDaemonEndpoints daemonEndpoints = 13;

  // Partitions describes which partitions cluster contains
  // +optional
  repeated string partitions = 14;

  // SecretRef of planet cluster
  // +optional
  optional ClusterSecretRef secretRef = 15;

  // Storage is an array of csi plugins installed in the planet cluster
  // +optional
  repeated string storage = 16;
}

// DaemonEndpoint contains information about a single Daemon endpoint.
message DaemonEndpoint {
  // Port number of the given endpoint.
  // +required
  optional int32 port = 1;

  // Protocol of the given endpoint, http/https
  // +required
  optional string protocol = 2;

  // Address of the given endpoint
  // +required
  optional string address = 3;
}

message Info {
  optional string major = 1;

  optional string minor = 2;

  optional string gitVersion = 3;

  optional string gitCommit = 4;

  optional string gitTreeState = 5;

  optional string buildDate = 6;

  optional string goVersion = 7;

  optional string compiler = 8;

  optional string platform = 9;
}

message InitConfiguration {
  // KubernetesVersion represents version of the workloadCluster.
  // +optional
  optional string kubernetesVersion = 1;

  // ControlPlaneMachineCount represents the numbers of controlPlaneMachine.
  // +optional
  optional int32 controlPlaneMachineCount = 2;

  // WorkerMachineCount represents the numbers of WorkerMachine.
  // +optional
  optional int32 workerMachineCount = 3;
}

message InitializeWorkloadCluster {
  // Name is the name of the plugin for creating a WorkloadCluster.
  // +required
  optional string name = 1;

  // InitConfiguration descibes configuration of the WorkloadCluster that you want to establish.
  // +required
  optional InitConfiguration configurations = 2;
}

message KubeletForClusterConfiguration {
  // Auth describes authentication of specific WorkloadCluster.
  // If selected initializeWorkloadCluster, this filed can be ignored.
  // +optional
  optional Auth auth = 1;

  // Target represents which WorkloadCluster kubelet-for-cluster will be deployed on.
  // If selected initializeWorkloadCluster, this filed can be ignored.
  // +optional
  optional Target target = 2;

  // Image represents which image to create kubelet-for-cluster.
  // +optional
  optional string image = 3;

  // Template represents configuraton template of kubelet-for-cluster,
  // Parameters that are not specified will be filled by the configuration in the template.
  // +optional
  optional string template = 4;

  // ReservedCPU represents WorkloadCluster reserved CPU.
  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity reservedCPU = 5;

  // ReservedCPU represents WorkloadCluster reserved Memory.
  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity reservedMemory = 6;

  // TopNodeN represents cluster resource top node n.
  // +optional
  optional int32 topNodeN = 7;

  // HeartbeatFrequency represents the heartbeat frequency with the Federation.
  // +optional
  optional int64 heartbeatFrequency = 8;

  // LeaseDurationSeconds represents the lease period of the Workload cluster.
  // +optional
  optional int64 leaseDurationSeconds = 9;

  // ForceSyncFrequency represents forced synchronous cycle with Federation
  // +optional
  optional int64 forceSyncFrequency = 10;

  // NamespacePrefix represents mapping from Federated namespaces to WorkLoadClusters
  // +optional
  optional string namespacePrefix = 11;
}

// NamespaceUsage describes requests and limits resource of a federal namespace in the WorkloadCluster.
message NamespaceUsage {
  // Name represents the name of namespace.
  // +required
  optional string name = 1;

  // Usage describes the requests and limits resource of a federal namespace in the WorkloadCluster.
  // +required
  optional k8s.io.api.core.v1.ResourceRequirements usage = 2;
}

// NodeLeftResource describes a node's remained resource.
message NodeLeftResource {
  // Name represents the name of the node.
  // +required
  optional string name = 1;

  // Left describes remained resource of the node.
  // +required
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> left = 2;
}

message PreRegisterWorkloadCluster {
  // Name is the name of the plugin for deploying kubelet-for-cluster.
  // +required
  optional string name = 1;

  // Configurations descibes configrutions of kubelet-for-cluster
  // and which WhichCluster to deploy.
  // +required
  optional KubeletForClusterConfiguration configurations = 2;
}

message Target {
  // Apiserver represents the IP address and port of WorkloadCLuster apiserver
  // +optional
  optional string apiserver = 1;
}


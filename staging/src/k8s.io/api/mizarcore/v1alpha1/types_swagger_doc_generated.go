/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_Addons = map[string]string{
	"initializeWorkloadCluster":  "InitializeWorkloadCluster descibes which plugin to establish a WorkloadCluster and configuration of the cluster MizarGalaxy provides a default plugin, cluster-api-quick-start, to establish a WorkloadCluster.",
	"preRegisterWorkloadCluster": "PreRegisterWorkloadCluster describes the process before register WorkloadCluster to MizarGalax. More specificly, it describes the configuration of kubelet-for-cluster deployed in the specific WorkloadCluster.",
}

func (Addons) SwaggerDoc() map[string]string {
	return map_Addons
}

var map_Address = map[string]string{
	"":        "Addresses shows workload cluster apiserver addresses.",
	"address": "AddressIP represents IP of the address",
	"type":    "Type represents the type of Address.",
}

func (Address) SwaggerDoc() map[string]string {
	return map_Address
}

var map_Auth = map[string]string{
	"type":       "Type defines type of authentication, \"KubeConig\" or \"Token\"",
	"kubeconfig": "Kubeconfig represents the path of kubernetes configuration",
	"token":      "Token represents the token to access WorkloadCluster",
}

func (Auth) SwaggerDoc() map[string]string {
	return map_Auth
}

var map_Cluster = map[string]string{
	"": "Cluster is the Schema for the clusters API.",
}

func (Cluster) SwaggerDoc() map[string]string {
	return map_Cluster
}

var map_ClusterCondition = map[string]string{
	"type":               "Type of cluster condition.",
	"status":             "Status of the condition, one of True, False, Unknown.",
	"lastHeartbeatTime":  "Last time we got an update on a given condition.",
	"lastTransitionTime": "Last time the condition transit from one status to another.",
	"reason":             "(brief) reason for the condition's last transition.",
	"message":            "Human readable message indicating details about last transition.",
}

func (ClusterCondition) SwaggerDoc() map[string]string {
	return map_ClusterCondition
}

var map_ClusterDaemonEndpoints = map[string]string{
	"":                          "ClusterDaemonEndpoints lists ports opened by daemons running on the Node.",
	"kubeletForClusterEndpoint": "Endpoint on which KubeletForCluster is listening.",
	"apiServerEndpoint":         "Endpoint on which KubeApiServer is listening in planet cluster",
}

func (ClusterDaemonEndpoints) SwaggerDoc() map[string]string {
	return map_ClusterDaemonEndpoints
}

var map_ClusterList = map[string]string{
	"": "ClusterList contains a list of Cluster.",
}

func (ClusterList) SwaggerDoc() map[string]string {
	return map_ClusterList
}

var map_ClusterProxyOptions = map[string]string{
	"":     "ClusterProxyOptions is the query options to a Node's proxy call",
	"path": "Path is the URL path to use for the current proxy request",
}

func (ClusterProxyOptions) SwaggerDoc() map[string]string {
	return map_ClusterProxyOptions
}

var map_ClusterSecretRef = map[string]string{
	"":          "ClusterSecretRef contains information about a credential for accessing planet cluster",
	"name":      "Name of secret",
	"namespace": "Namespace of secret",
}

func (ClusterSecretRef) SwaggerDoc() map[string]string {
	return map_ClusterSecretRef
}

var map_ClusterSet = map[string]string{
	"": "Cluster is the Schema for the clusters API.",
}

func (ClusterSet) SwaggerDoc() map[string]string {
	return map_ClusterSet
}

var map_ClusterSetList = map[string]string{
	"": "ClusterList contains a list of Cluster.",
}

func (ClusterSetList) SwaggerDoc() map[string]string {
	return map_ClusterSetList
}

var map_ClusterSpec = map[string]string{
	"":       "ClusterSpec defines the desired state of Cluster.",
	"addons": "Addons describe the configuration of Cluster will be controlled by MizarGalaxy.",
}

func (ClusterSpec) SwaggerDoc() map[string]string {
	return map_ClusterSpec
}

var map_ClusterStatus = map[string]string{
	"":                         "ClusterStatus defines the observed state of Cluster",
	"configuration":            "Configuration describes the configuration of kubelet-for-cluster",
	"addresses":                "Addresses shows workload cluster apiserver addresses",
	"phase":                    "Phase represents the status of the WorkCluster.",
	"allocatable":              "Allocatable represents the resources of a cluster that are available for scheduling.",
	"usage":                    "Usage represents the resources of a cluster that has already used.",
	"nodes":                    "Nodes describes remained resource of top N nodes based on remaining resources",
	"planetClusterAllocatable": "PlanetClusterAllocatable represents the resources of a cluster that are available for scheduling.",
	"planetClusterUsage":       "PlanetClusterUsage represents the resources of a cluster that has already used.",
	"planetClusterNodes":       "PlanetClusterNodes describes remained resource of top N nodes based on remaining resources",
	"namespaces":               "Namespaces describes resource occupation of a federal namespace in the WorkloadCluster.",
	"conditions":               "Conditions is an array of current cluster conditions.",
	"clusterInfo":              "ClusterInfo describes the specific information of WorkloadCluster",
	"daemonEndpoints":          "Endpoints of daemons running on the Cluster.",
	"partitions":               "Partitions describes which partitions cluster contains",
	"secretRef":                "SecretRef of planet cluster",
	"storage":                  "Storage is an array of csi plugins installed in the planet cluster",
}

func (ClusterStatus) SwaggerDoc() map[string]string {
	return map_ClusterStatus
}

var map_DaemonEndpoint = map[string]string{
	"":         "DaemonEndpoint contains information about a single Daemon endpoint.",
	"port":     "Port number of the given endpoint.",
	"protocol": "Protocol of the given endpoint, http/https",
	"address":  "Address of the given endpoint",
}

func (DaemonEndpoint) SwaggerDoc() map[string]string {
	return map_DaemonEndpoint
}

var map_InitConfiguration = map[string]string{
	"kubernetesVersion":        "KubernetesVersion represents version of the workloadCluster.",
	"controlPlaneMachineCount": "ControlPlaneMachineCount represents the numbers of controlPlaneMachine.",
	"workerMachineCount":       "WorkerMachineCount represents the numbers of WorkerMachine.",
}

func (InitConfiguration) SwaggerDoc() map[string]string {
	return map_InitConfiguration
}

var map_InitializeWorkloadCluster = map[string]string{
	"name":           "Name is the name of the plugin for creating a WorkloadCluster.",
	"configurations": "InitConfiguration descibes configuration of the WorkloadCluster that you want to establish.",
}

func (InitializeWorkloadCluster) SwaggerDoc() map[string]string {
	return map_InitializeWorkloadCluster
}

var map_KubeletForClusterConfiguration = map[string]string{
	"auth":                 "Auth describes authentication of specific WorkloadCluster. If selected initializeWorkloadCluster, this filed can be ignored.",
	"target":               "Target represents which WorkloadCluster kubelet-for-cluster will be deployed on. If selected initializeWorkloadCluster, this filed can be ignored.",
	"image":                "Image represents which image to create kubelet-for-cluster.",
	"template":             "Template represents configuraton template of kubelet-for-cluster, Parameters that are not specified will be filled by the configuration in the template.",
	"reservedCPU":          "ReservedCPU represents WorkloadCluster reserved CPU.",
	"reservedMemory":       "ReservedCPU represents WorkloadCluster reserved Memory.",
	"topNodeN":             "TopNodeN represents cluster resource top node n.",
	"heartbeatFrequency":   "HeartbeatFrequency represents the heartbeat frequency with the Federation.",
	"leaseDurationSeconds": "LeaseDurationSeconds represents the lease period of the Workload cluster.",
	"forceSyncFrequency":   "ForceSyncFrequency represents forced synchronous cycle with Federation",
	"namespacePrefix":      "NamespacePrefix represents mapping from Federated namespaces to WorkLoadClusters",
}

func (KubeletForClusterConfiguration) SwaggerDoc() map[string]string {
	return map_KubeletForClusterConfiguration
}

var map_NamespaceUsage = map[string]string{
	"":      "NamespaceUsage describes requests and limits resource of a federal namespace in the WorkloadCluster.",
	"name":  "Name represents the name of namespace.",
	"usage": "Usage describes the requests and limits resource of a federal namespace in the WorkloadCluster.",
}

func (NamespaceUsage) SwaggerDoc() map[string]string {
	return map_NamespaceUsage
}

var map_NodeLeftResource = map[string]string{
	"":     "NodeLeftResource describes a node's remained resource.",
	"name": "Name represents the name of the node.",
	"left": "Left describes remained resource of the node.",
}

func (NodeLeftResource) SwaggerDoc() map[string]string {
	return map_NodeLeftResource
}

var map_PreRegisterWorkloadCluster = map[string]string{
	"name":           "Name is the name of the plugin for deploying kubelet-for-cluster.",
	"configurations": "Configurations descibes configrutions of kubelet-for-cluster and which WhichCluster to deploy.",
}

func (PreRegisterWorkloadCluster) SwaggerDoc() map[string]string {
	return map_PreRegisterWorkloadCluster
}

var map_Target = map[string]string{
	"apiserver": "Apiserver represents the IP address and port of WorkloadCLuster apiserver",
}

func (Target) SwaggerDoc() map[string]string {
	return map_Target
}

// AUTO-GENERATED FUNCTIONS END HERE

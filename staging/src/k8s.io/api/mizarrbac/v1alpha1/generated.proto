/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.mizarrbac.v1alpha1;

import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/mizarrbac/v1alpha1";

// AggregationRule describes how to locate GlobalRoles to aggregate into the GlobalRole
message AggregationRule {
  // GlobalRoleSelectors holds a list of selectors which will be used to find GlobalRoles and create the rules.
  // If any of the selectors match, then the GlobalRole's permissions will be added
  // +optional
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector globalRoleSelectors = 1;
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// GlobalRole is a global level, logical grouping of PolicyRules
message GlobalRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 6;

  // RegionSelectors is a selector list of regions this rule applies to.
  // +optional
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector regionSelectors = 2;

  // ClusterSelectors is a selector list of clusters this rule applies to.
  // +optional
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterSelectors = 3;

  // Rules holds all the PolicyRules for this ClusterRole
  // +optional
  repeated k8s.io.api.rbac.v1.PolicyRule rules = 4;

  // AggregationRule is an optional field that describes how to build the Rules for this GlobalRole.
  // If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be
  // stomped by the controller.
  // +optional
  optional AggregationRule aggregationRule = 5;
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// GlobalRoleBinding references a GlobalRole, but not contain it.  It can reference a GlobalRole in the global namespace,
// and adds who information via Subject.
message GlobalRoleBinding {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Subjects holds references to the objects the role applies to.
  // +optional
  repeated k8s.io.api.rbac.v1.Subject subjects = 2;

  // RoleRef can only reference a ClusterRole in the global namespace.
  // If the RoleRef cannot be resolved, the Authorizer must return an error.
  optional k8s.io.api.rbac.v1.RoleRef roleRef = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// GlobalRoleBindingList contains a list of GlobalRoleBinding
message GlobalRoleBindingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GlobalRoleBinding items = 2;
}

// GlobalRoleList contains a list of GlobalRole
message GlobalRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GlobalRole items = 2;
}


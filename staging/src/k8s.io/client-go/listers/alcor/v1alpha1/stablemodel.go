/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/alcor/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StableModelLister helps list StableModels.
// All objects returned here must be treated as read-only.
type StableModelLister interface {
	// List lists all StableModels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StableModel, err error)
	// StableModels returns an object that can list and get StableModels.
	StableModels(namespace string) StableModelNamespaceLister
	StableModelListerExpansion
}

// stableModelLister implements the StableModelLister interface.
type stableModelLister struct {
	indexer cache.Indexer
}

// NewStableModelLister returns a new StableModelLister.
func NewStableModelLister(indexer cache.Indexer) StableModelLister {
	return &stableModelLister{indexer: indexer}
}

// List lists all StableModels in the indexer.
func (s *stableModelLister) List(selector labels.Selector) (ret []*v1alpha1.StableModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StableModel))
	})
	return ret, err
}

// StableModels returns an object that can list and get StableModels.
func (s *stableModelLister) StableModels(namespace string) StableModelNamespaceLister {
	return stableModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StableModelNamespaceLister helps list and get StableModels.
// All objects returned here must be treated as read-only.
type StableModelNamespaceLister interface {
	// List lists all StableModels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StableModel, err error)
	// Get retrieves the StableModel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StableModel, error)
	StableModelNamespaceListerExpansion
}

// stableModelNamespaceLister implements the StableModelNamespaceLister
// interface.
type stableModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StableModels in the indexer for a given namespace.
func (s stableModelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StableModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StableModel))
	})
	return ret, err
}

// Get retrieves the StableModel from the indexer for a given namespace and name.
func (s stableModelNamespaceLister) Get(name string) (*v1alpha1.StableModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("stablemodel"), name)
	}
	return obj.(*v1alpha1.StableModel), nil
}

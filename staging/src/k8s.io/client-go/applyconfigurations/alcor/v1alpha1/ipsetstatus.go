/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// IPSetStatusApplyConfiguration represents an declarative configuration of the IPSetStatus type for use
// with apply.
type IPSetStatusApplyConfiguration struct {
	Status         *string           `json:"Status,omitempty"`
	Message        *string           `json:"Message,omitempty"`
	IPs            []string          `json:"IPs,omitempty"`
	DirtyIPs       []string          `json:"DirtyIPs,omitempty"`
	IPMap          map[string]string `json:"IPMap,omitempty"`
	LastApplied    map[string]string `json:"LastApplied,omitempty"`
	CallbackReason *string           `json:"CallbackReason,omitempty"`
}

// IPSetStatusApplyConfiguration constructs an declarative configuration of the IPSetStatus type for use with
// apply.
func IPSetStatus() *IPSetStatusApplyConfiguration {
	return &IPSetStatusApplyConfiguration{}
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *IPSetStatusApplyConfiguration) WithStatus(value string) *IPSetStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *IPSetStatusApplyConfiguration) WithMessage(value string) *IPSetStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithIPs adds the given value to the IPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPs field.
func (b *IPSetStatusApplyConfiguration) WithIPs(values ...string) *IPSetStatusApplyConfiguration {
	for i := range values {
		b.IPs = append(b.IPs, values[i])
	}
	return b
}

// WithDirtyIPs adds the given value to the DirtyIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DirtyIPs field.
func (b *IPSetStatusApplyConfiguration) WithDirtyIPs(values ...string) *IPSetStatusApplyConfiguration {
	for i := range values {
		b.DirtyIPs = append(b.DirtyIPs, values[i])
	}
	return b
}

// WithIPMap puts the entries into the IPMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the IPMap field,
// overwriting an existing map entries in IPMap field with the same key.
func (b *IPSetStatusApplyConfiguration) WithIPMap(entries map[string]string) *IPSetStatusApplyConfiguration {
	if b.IPMap == nil && len(entries) > 0 {
		b.IPMap = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.IPMap[k] = v
	}
	return b
}

// WithLastApplied puts the entries into the LastApplied field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the LastApplied field,
// overwriting an existing map entries in LastApplied field with the same key.
func (b *IPSetStatusApplyConfiguration) WithLastApplied(entries map[string]string) *IPSetStatusApplyConfiguration {
	if b.LastApplied == nil && len(entries) > 0 {
		b.LastApplied = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.LastApplied[k] = v
	}
	return b
}

// WithCallbackReason sets the CallbackReason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CallbackReason field is set to the value of the last call.
func (b *IPSetStatusApplyConfiguration) WithCallbackReason(value string) *IPSetStatusApplyConfiguration {
	b.CallbackReason = &value
	return b
}

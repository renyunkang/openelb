/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/alcor/v1alpha1"
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// StableModelSpecApplyConfiguration represents an declarative configuration of the StableModelSpec type for use
// with apply.
type StableModelSpecApplyConfiguration struct {
	Selector                  *v1.LabelSelectorApplyConfiguration                 `json:"selector,omitempty"`
	Mode                      *v1alpha1.Mode                                      `json:"mode,omitempty"`
	PodTemplate               *corev1.PodTemplateSpecApplyConfiguration           `json:"podTemplate,omitempty"`
	Network                   *NetworkRequestApplyConfiguration                   `json:"network,omitempty"`
	Storage                   []StorageRequestApplyConfiguration                  `json:"storage,omitempty"`
	Feature                   *FeaturesApplyConfiguration                         `json:"feature,omitempty"`
	NodeName                  *string                                             `json:"nodeName,omitempty"`
	ResizePhase               *v1alpha1.ResizePhase                               `json:"resizePhase,omitempty"`
	ClusterSelector           map[string]string                                   `json:"clusterSelector,omitempty"`
	ClusterName               *string                                             `json:"clusterName,omitempty"`
	Affinity                  *AffinityApplyConfiguration                         `json:"affinity,omitempty"`
	Tolerations               []corev1.TolerationApplyConfiguration               `json:"tolerations,omitempty"`
	SchedulerName             *string                                             `json:"schedulerName,omitempty"`
	TopologySpreadConstraints []corev1.TopologySpreadConstraintApplyConfiguration `json:"topologySpreadConstraints,omitempty"`
}

// StableModelSpecApplyConfiguration constructs an declarative configuration of the StableModelSpec type for use with
// apply.
func StableModelSpec() *StableModelSpecApplyConfiguration {
	return &StableModelSpecApplyConfiguration{}
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithSelector(value *v1.LabelSelectorApplyConfiguration) *StableModelSpecApplyConfiguration {
	b.Selector = value
	return b
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithMode(value v1alpha1.Mode) *StableModelSpecApplyConfiguration {
	b.Mode = &value
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithPodTemplate(value *corev1.PodTemplateSpecApplyConfiguration) *StableModelSpecApplyConfiguration {
	b.PodTemplate = value
	return b
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithNetwork(value *NetworkRequestApplyConfiguration) *StableModelSpecApplyConfiguration {
	b.Network = value
	return b
}

// WithStorage adds the given value to the Storage field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Storage field.
func (b *StableModelSpecApplyConfiguration) WithStorage(values ...*StorageRequestApplyConfiguration) *StableModelSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStorage")
		}
		b.Storage = append(b.Storage, *values[i])
	}
	return b
}

// WithFeature sets the Feature field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Feature field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithFeature(value *FeaturesApplyConfiguration) *StableModelSpecApplyConfiguration {
	b.Feature = value
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithNodeName(value string) *StableModelSpecApplyConfiguration {
	b.NodeName = &value
	return b
}

// WithResizePhase sets the ResizePhase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResizePhase field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithResizePhase(value v1alpha1.ResizePhase) *StableModelSpecApplyConfiguration {
	b.ResizePhase = &value
	return b
}

// WithClusterSelector puts the entries into the ClusterSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ClusterSelector field,
// overwriting an existing map entries in ClusterSelector field with the same key.
func (b *StableModelSpecApplyConfiguration) WithClusterSelector(entries map[string]string) *StableModelSpecApplyConfiguration {
	if b.ClusterSelector == nil && len(entries) > 0 {
		b.ClusterSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ClusterSelector[k] = v
	}
	return b
}

// WithClusterName sets the ClusterName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterName field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithClusterName(value string) *StableModelSpecApplyConfiguration {
	b.ClusterName = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithAffinity(value *AffinityApplyConfiguration) *StableModelSpecApplyConfiguration {
	b.Affinity = value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *StableModelSpecApplyConfiguration) WithTolerations(values ...*corev1.TolerationApplyConfiguration) *StableModelSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTolerations")
		}
		b.Tolerations = append(b.Tolerations, *values[i])
	}
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *StableModelSpecApplyConfiguration) WithSchedulerName(value string) *StableModelSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *StableModelSpecApplyConfiguration) WithTopologySpreadConstraints(values ...*corev1.TopologySpreadConstraintApplyConfiguration) *StableModelSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTopologySpreadConstraints")
		}
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, *values[i])
	}
	return b
}

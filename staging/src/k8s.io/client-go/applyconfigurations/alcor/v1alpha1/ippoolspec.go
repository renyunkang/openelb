/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// IPPoolSpecApplyConfiguration represents an declarative configuration of the IPPoolSpec type for use
// with apply.
type IPPoolSpecApplyConfiguration struct {
	CopyFrom            *string           `json:"copyFrom,omitempty"`
	FirstIP             *string           `json:"firstIP,omitempty"`
	LastIP              *string           `json:"lastIP,omitempty"`
	AdminStatus         *bool             `json:"adminStatus,omitempty"`
	Deprecated          *bool             `json:"deprecated,omitempty"`
	Detect              *bool             `json:"detect,omitempty"`
	Grid                *bool             `json:"grid,omitempty"`
	SpecialClaimedQuota map[string]int64  `json:"specialClaimedQuota,omitempty"`
	Route               *string           `json:"route,omitempty"`
	Mask                *int64            `json:"mask,omitempty"`
	Vlan                *int64            `json:"vlan,omitempty"`
	AdminAssign         map[string]string `json:"adminAssign,omitempty"`
	TORID               *string           `json:"torID,omitempty"`
	StartIP             *string           `json:"startIP,omitempty"`
	EndIP               *string           `json:"endIP,omitempty"`
	DisabledIP          []string          `json:"disabledIP,omitempty"`
	Backend             *string           `json:"backend,omitempty"`
}

// IPPoolSpecApplyConfiguration constructs an declarative configuration of the IPPoolSpec type for use with
// apply.
func IPPoolSpec() *IPPoolSpecApplyConfiguration {
	return &IPPoolSpecApplyConfiguration{}
}

// WithCopyFrom sets the CopyFrom field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CopyFrom field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithCopyFrom(value string) *IPPoolSpecApplyConfiguration {
	b.CopyFrom = &value
	return b
}

// WithFirstIP sets the FirstIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirstIP field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithFirstIP(value string) *IPPoolSpecApplyConfiguration {
	b.FirstIP = &value
	return b
}

// WithLastIP sets the LastIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastIP field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithLastIP(value string) *IPPoolSpecApplyConfiguration {
	b.LastIP = &value
	return b
}

// WithAdminStatus sets the AdminStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminStatus field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithAdminStatus(value bool) *IPPoolSpecApplyConfiguration {
	b.AdminStatus = &value
	return b
}

// WithDeprecated sets the Deprecated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Deprecated field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithDeprecated(value bool) *IPPoolSpecApplyConfiguration {
	b.Deprecated = &value
	return b
}

// WithDetect sets the Detect field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Detect field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithDetect(value bool) *IPPoolSpecApplyConfiguration {
	b.Detect = &value
	return b
}

// WithGrid sets the Grid field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Grid field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithGrid(value bool) *IPPoolSpecApplyConfiguration {
	b.Grid = &value
	return b
}

// WithSpecialClaimedQuota puts the entries into the SpecialClaimedQuota field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the SpecialClaimedQuota field,
// overwriting an existing map entries in SpecialClaimedQuota field with the same key.
func (b *IPPoolSpecApplyConfiguration) WithSpecialClaimedQuota(entries map[string]int64) *IPPoolSpecApplyConfiguration {
	if b.SpecialClaimedQuota == nil && len(entries) > 0 {
		b.SpecialClaimedQuota = make(map[string]int64, len(entries))
	}
	for k, v := range entries {
		b.SpecialClaimedQuota[k] = v
	}
	return b
}

// WithRoute sets the Route field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Route field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithRoute(value string) *IPPoolSpecApplyConfiguration {
	b.Route = &value
	return b
}

// WithMask sets the Mask field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mask field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithMask(value int64) *IPPoolSpecApplyConfiguration {
	b.Mask = &value
	return b
}

// WithVlan sets the Vlan field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vlan field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithVlan(value int64) *IPPoolSpecApplyConfiguration {
	b.Vlan = &value
	return b
}

// WithAdminAssign puts the entries into the AdminAssign field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdminAssign field,
// overwriting an existing map entries in AdminAssign field with the same key.
func (b *IPPoolSpecApplyConfiguration) WithAdminAssign(entries map[string]string) *IPPoolSpecApplyConfiguration {
	if b.AdminAssign == nil && len(entries) > 0 {
		b.AdminAssign = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AdminAssign[k] = v
	}
	return b
}

// WithTORID sets the TORID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TORID field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithTORID(value string) *IPPoolSpecApplyConfiguration {
	b.TORID = &value
	return b
}

// WithStartIP sets the StartIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartIP field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithStartIP(value string) *IPPoolSpecApplyConfiguration {
	b.StartIP = &value
	return b
}

// WithEndIP sets the EndIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndIP field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithEndIP(value string) *IPPoolSpecApplyConfiguration {
	b.EndIP = &value
	return b
}

// WithDisabledIP adds the given value to the DisabledIP field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DisabledIP field.
func (b *IPPoolSpecApplyConfiguration) WithDisabledIP(values ...string) *IPPoolSpecApplyConfiguration {
	for i := range values {
		b.DisabledIP = append(b.DisabledIP, values[i])
	}
	return b
}

// WithBackend sets the Backend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Backend field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithBackend(value string) *IPPoolSpecApplyConfiguration {
	b.Backend = &value
	return b
}

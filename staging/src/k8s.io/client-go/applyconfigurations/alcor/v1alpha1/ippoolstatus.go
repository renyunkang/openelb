/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// IPPoolStatusApplyConfiguration represents an declarative configuration of the IPPoolStatus type for use
// with apply.
type IPPoolStatusApplyConfiguration struct {
	IPCount               *int64            `json:"IPCount,omitempty"`
	AvailableCount        *int64            `json:"AvailableCount,omitempty"`
	AllocatedIPs          map[string]string `json:"Allocated,omitempty"`
	Status                *string           `json:"Status,omitempty"`
	LastApplied           map[string]string `json:"LastApplied,omitempty"`
	Message               *string           `json:"Message,omitempty"`
	BlockedIPs            map[string]string `json:"BlockedIPs,omitempty"`
	SpecialClaimedUsage   map[string]int64  `json:"SpecialClaimedUsage,omitempty"`
	Migrated              *bool             `json:"Migrated,omitempty"`
	OldAllocatedIPs       map[string]string `json:"oldAllocatedIPs,omitempty"`
	OldAvailableCount     *int64            `json:"oldAvailableCount,omitempty"`
	OldIPCount            *int64            `json:"oldIPCount,omitempty"`
	OldStatus             *string           `json:"oldStatus,omitempty"`
	OldLastAppliedStartIP *string           `json:"lastAppliedStartIP,omitempty"`
	OldLastAppliedEndIP   *string           `json:"lastAppliedEndIP,omitempty"`
}

// IPPoolStatusApplyConfiguration constructs an declarative configuration of the IPPoolStatus type for use with
// apply.
func IPPoolStatus() *IPPoolStatusApplyConfiguration {
	return &IPPoolStatusApplyConfiguration{}
}

// WithIPCount sets the IPCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPCount field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithIPCount(value int64) *IPPoolStatusApplyConfiguration {
	b.IPCount = &value
	return b
}

// WithAvailableCount sets the AvailableCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AvailableCount field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithAvailableCount(value int64) *IPPoolStatusApplyConfiguration {
	b.AvailableCount = &value
	return b
}

// WithAllocatedIPs puts the entries into the AllocatedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AllocatedIPs field,
// overwriting an existing map entries in AllocatedIPs field with the same key.
func (b *IPPoolStatusApplyConfiguration) WithAllocatedIPs(entries map[string]string) *IPPoolStatusApplyConfiguration {
	if b.AllocatedIPs == nil && len(entries) > 0 {
		b.AllocatedIPs = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AllocatedIPs[k] = v
	}
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithStatus(value string) *IPPoolStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithLastApplied puts the entries into the LastApplied field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the LastApplied field,
// overwriting an existing map entries in LastApplied field with the same key.
func (b *IPPoolStatusApplyConfiguration) WithLastApplied(entries map[string]string) *IPPoolStatusApplyConfiguration {
	if b.LastApplied == nil && len(entries) > 0 {
		b.LastApplied = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.LastApplied[k] = v
	}
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithMessage(value string) *IPPoolStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithBlockedIPs puts the entries into the BlockedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the BlockedIPs field,
// overwriting an existing map entries in BlockedIPs field with the same key.
func (b *IPPoolStatusApplyConfiguration) WithBlockedIPs(entries map[string]string) *IPPoolStatusApplyConfiguration {
	if b.BlockedIPs == nil && len(entries) > 0 {
		b.BlockedIPs = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.BlockedIPs[k] = v
	}
	return b
}

// WithSpecialClaimedUsage puts the entries into the SpecialClaimedUsage field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the SpecialClaimedUsage field,
// overwriting an existing map entries in SpecialClaimedUsage field with the same key.
func (b *IPPoolStatusApplyConfiguration) WithSpecialClaimedUsage(entries map[string]int64) *IPPoolStatusApplyConfiguration {
	if b.SpecialClaimedUsage == nil && len(entries) > 0 {
		b.SpecialClaimedUsage = make(map[string]int64, len(entries))
	}
	for k, v := range entries {
		b.SpecialClaimedUsage[k] = v
	}
	return b
}

// WithMigrated sets the Migrated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Migrated field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithMigrated(value bool) *IPPoolStatusApplyConfiguration {
	b.Migrated = &value
	return b
}

// WithOldAllocatedIPs puts the entries into the OldAllocatedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the OldAllocatedIPs field,
// overwriting an existing map entries in OldAllocatedIPs field with the same key.
func (b *IPPoolStatusApplyConfiguration) WithOldAllocatedIPs(entries map[string]string) *IPPoolStatusApplyConfiguration {
	if b.OldAllocatedIPs == nil && len(entries) > 0 {
		b.OldAllocatedIPs = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.OldAllocatedIPs[k] = v
	}
	return b
}

// WithOldAvailableCount sets the OldAvailableCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OldAvailableCount field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithOldAvailableCount(value int64) *IPPoolStatusApplyConfiguration {
	b.OldAvailableCount = &value
	return b
}

// WithOldIPCount sets the OldIPCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OldIPCount field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithOldIPCount(value int64) *IPPoolStatusApplyConfiguration {
	b.OldIPCount = &value
	return b
}

// WithOldStatus sets the OldStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OldStatus field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithOldStatus(value string) *IPPoolStatusApplyConfiguration {
	b.OldStatus = &value
	return b
}

// WithOldLastAppliedStartIP sets the OldLastAppliedStartIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OldLastAppliedStartIP field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithOldLastAppliedStartIP(value string) *IPPoolStatusApplyConfiguration {
	b.OldLastAppliedStartIP = &value
	return b
}

// WithOldLastAppliedEndIP sets the OldLastAppliedEndIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OldLastAppliedEndIP field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithOldLastAppliedEndIP(value string) *IPPoolStatusApplyConfiguration {
	b.OldLastAppliedEndIP = &value
	return b
}

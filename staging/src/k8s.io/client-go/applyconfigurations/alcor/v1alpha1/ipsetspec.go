/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// IPSetSpecApplyConfiguration represents an declarative configuration of the IPSetSpec type for use
// with apply.
type IPSetSpecApplyConfiguration struct {
	Replicas   *int64  `json:"replicas,omitempty"`
	Pool       *string `json:"pool,omitempty"`
	VNI        *bool   `json:"vni,omitempty"`
	Sync       *bool   `json:"sync,omitempty"`
	Deprecated *bool   `json:"deprecated,omitempty"`
}

// IPSetSpecApplyConfiguration constructs an declarative configuration of the IPSetSpec type for use with
// apply.
func IPSetSpec() *IPSetSpecApplyConfiguration {
	return &IPSetSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *IPSetSpecApplyConfiguration) WithReplicas(value int64) *IPSetSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithPool sets the Pool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pool field is set to the value of the last call.
func (b *IPSetSpecApplyConfiguration) WithPool(value string) *IPSetSpecApplyConfiguration {
	b.Pool = &value
	return b
}

// WithVNI sets the VNI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNI field is set to the value of the last call.
func (b *IPSetSpecApplyConfiguration) WithVNI(value bool) *IPSetSpecApplyConfiguration {
	b.VNI = &value
	return b
}

// WithSync sets the Sync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sync field is set to the value of the last call.
func (b *IPSetSpecApplyConfiguration) WithSync(value bool) *IPSetSpecApplyConfiguration {
	b.Sync = &value
	return b
}

// WithDeprecated sets the Deprecated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Deprecated field is set to the value of the last call.
func (b *IPSetSpecApplyConfiguration) WithDeprecated(value bool) *IPSetSpecApplyConfiguration {
	b.Deprecated = &value
	return b
}

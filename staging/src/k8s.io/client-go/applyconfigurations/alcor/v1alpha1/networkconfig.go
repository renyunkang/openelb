/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// NetworkConfigApplyConfiguration represents an declarative configuration of the NetworkConfig type for use
// with apply.
type NetworkConfigApplyConfiguration struct {
	IP     *string `json:"ip,omitempty"`
	NIC    *string `json:"nic,omitempty"`
	NICMAC *string `json:"nicmac,omitempty"`
	Host   *string `json:"host,omitempty"`
	Pool   *string `json:"pool,omitempty"`
	Mbps   *string `json:"mbps,omitempty"`
	VNI    *bool   `json:"vni,omitempty"`
}

// NetworkConfigApplyConfiguration constructs an declarative configuration of the NetworkConfig type for use with
// apply.
func NetworkConfig() *NetworkConfigApplyConfiguration {
	return &NetworkConfigApplyConfiguration{}
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithIP(value string) *NetworkConfigApplyConfiguration {
	b.IP = &value
	return b
}

// WithNIC sets the NIC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NIC field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithNIC(value string) *NetworkConfigApplyConfiguration {
	b.NIC = &value
	return b
}

// WithNICMAC sets the NICMAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NICMAC field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithNICMAC(value string) *NetworkConfigApplyConfiguration {
	b.NICMAC = &value
	return b
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithHost(value string) *NetworkConfigApplyConfiguration {
	b.Host = &value
	return b
}

// WithPool sets the Pool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pool field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithPool(value string) *NetworkConfigApplyConfiguration {
	b.Pool = &value
	return b
}

// WithMbps sets the Mbps field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mbps field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithMbps(value string) *NetworkConfigApplyConfiguration {
	b.Mbps = &value
	return b
}

// WithVNI sets the VNI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNI field is set to the value of the last call.
func (b *NetworkConfigApplyConfiguration) WithVNI(value bool) *NetworkConfigApplyConfiguration {
	b.VNI = &value
	return b
}

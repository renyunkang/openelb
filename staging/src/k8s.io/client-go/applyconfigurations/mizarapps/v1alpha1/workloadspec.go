/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/mizarapps/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// WorkloadSpecApplyConfiguration represents an declarative configuration of the WorkloadSpec type for use
// with apply.
type WorkloadSpecApplyConfiguration struct {
	Type          *v1alpha1.WorkloadType        `json:"type,omitempty"`
	K8SObjects    []runtime.RawExtension        `json:"k8sObjects,omitempty"`
	Location      *LocationApplyConfiguration   `json:"location,omitempty"`
	DestAffinity  *AffinityApplyConfiguration   `json:"destAffinity,omitempty"`
	SchedulerName *string                       `json:"schedulerName,omitempty"`
	CheckFilters  []K8SObjectApplyConfiguration `json:"checkFilters,omitempty"`
}

// WorkloadSpecApplyConfiguration constructs an declarative configuration of the WorkloadSpec type for use with
// apply.
func WorkloadSpec() *WorkloadSpecApplyConfiguration {
	return &WorkloadSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *WorkloadSpecApplyConfiguration) WithType(value v1alpha1.WorkloadType) *WorkloadSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithK8SObjects adds the given value to the K8SObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the K8SObjects field.
func (b *WorkloadSpecApplyConfiguration) WithK8SObjects(values ...runtime.RawExtension) *WorkloadSpecApplyConfiguration {
	for i := range values {
		b.K8SObjects = append(b.K8SObjects, values[i])
	}
	return b
}

// WithLocation sets the Location field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Location field is set to the value of the last call.
func (b *WorkloadSpecApplyConfiguration) WithLocation(value *LocationApplyConfiguration) *WorkloadSpecApplyConfiguration {
	b.Location = value
	return b
}

// WithDestAffinity sets the DestAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DestAffinity field is set to the value of the last call.
func (b *WorkloadSpecApplyConfiguration) WithDestAffinity(value *AffinityApplyConfiguration) *WorkloadSpecApplyConfiguration {
	b.DestAffinity = value
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *WorkloadSpecApplyConfiguration) WithSchedulerName(value string) *WorkloadSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithCheckFilters adds the given value to the CheckFilters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CheckFilters field.
func (b *WorkloadSpecApplyConfiguration) WithCheckFilters(values ...*K8SObjectApplyConfiguration) *WorkloadSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCheckFilters")
		}
		b.CheckFilters = append(b.CheckFilters, *values[i])
	}
	return b
}
